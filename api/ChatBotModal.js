import React, { useState, useEffect, useRef } from 'react';
import {
  Modal,
  AppState,
  ActivityIndicator,
  View,
  Image,
  TextInput,
  Text,
  ScrollView,
  StyleSheet,
  KeyboardAvoidingView,
  Platform,
  TouchableOpacity,
  Keyboard,
  // Share,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { askChatGPT } from '../api/chatgptService';
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { Audio } from 'expo-av';
import FadeInView from './FadeInView';
import StyledMarkdown from './StyledMarkdown';
import SavedAnswersModal from './SavedAnswersModal';
import { ToastAndroid} from 'react-native';
// import { InteractionManager } from 'react-native';
import { shareAnswerOutsideModal } from './shareAnswerOutsideModal';
import { Share as RNShare, InteractionManager } from 'react-native';
import * as Clipboard from 'expo-clipboard';
// import { ToastAndroid } from 'react-native';





const ChatBotModal = ({ visible, onClose, blockModalCloseRef }) => {
  const [question, setQuestion] = useState('');
  const [history, setHistory] = useState([]);
  const [lang, setLang] = useState('—Ä—É—Å—Å–∫–∏–π');
  const [username, setUsername] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showScrollToBottom, setShowScrollToBottom] = useState(false);
  const [scrollKey, setScrollKey] = useState(0);
  const [modalKey, setModalKey] = useState(0);
  const [verbContext, setVerbContext] = useState(null);

  const scrollViewRef = useRef(null);
  const lastVerbContextRef = useRef(null); // üîÑ —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–ª–∞–≥–æ–ª


  const [savedModalVisible, setSavedModalVisible] = useState(false);
  const [appState, setAppState] = useState(AppState.currentState);
  const isSharingRef = useRef(false);
  // 
  // const [blockModalClose, setBlockModalClose] = useState(false);
  // const blockModalCloseRef = useRef(false);
  
  const copyAnswer = async (text) => {
    try {
      await Clipboard.setStringAsync(text);
      ToastAndroid.show('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', ToastAndroid.SHORT);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', err);
    }
  };

  const stripMarkdown = (markdown) => {
    return markdown
      .replace(/!\[.*?\]\(.*?\)/g, '')                       // —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ![alt](url)
      .replace(/\[(.*?)\]\(.*?\)/g, '$1')                    // –∑–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫ [text](url) ‚Üí text
      .replace(/(\*\*|__)(.*?)\1/g, '$2')                    // –∂–∏—Ä–Ω—ã–π **text** –∏–ª–∏ __text__
      .replace(/(\*|_)(.*?)\1/g, '$2')                       // –∫—É—Ä—Å–∏–≤ *text* –∏–ª–∏ _text_
      .replace(/`([^`]+)`/g, '$1')                           // inline code
      .replace(/^\s*>+/gm, '')                               // —Ü–∏—Ç–∞—Ç—ã
      .replace(/^-{3,}/g, '')                                // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
      .replace(/^\s*#+\s*(.*)/gm, '$1')                      // –∑–∞–≥–æ–ª–æ–≤–∫–∏ # Heading ‚Üí Heading
      .replace(/\|/g, ' ')                                   // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
      .replace(/\n{2,}/g, '\n')                              // –¥–≤–æ–π–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã ‚Üí –æ–¥–∏–Ω
      .trim();
  };

  const translations = {
    —Ä—É—Å—Å–∫–∏–π: {
      ask: '–°–ø—Ä–æ—Å–∏—Ç—å',
      close: '–ó–∞–∫—Ä—ã—Ç—å',
      placeholder: '–°–ø—Ä–æ—Å–∏ –ø—Ä–æ –≥–ª–∞–≥–æ–ª...',
      you: '–í—ã',
      bot: '–ë–æ—Ç',
      loading: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç...',
      greeting: '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏–≤—Ä–∏—Ç–µ. –û—Å–æ–±–µ–Ω–Ω–æ ‚Äî —Å –≥–ª–∞–≥–æ–ª–∞–º–∏ –∏ –∏—Ö —Å–ø—Ä—è–∂–µ–Ω–∏–µ–º üî§',
      helpHint: '–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ —Å–ø—Ä—è–≥–∞—Ç—å –≥–ª–∞–≥–æ–ª ◊ú◊ú◊õ◊™ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ.',
      saved: '‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
      errorSave: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.',
    },
    english: {
      ask: 'Ask',
      close: 'Close',
      placeholder: 'Ask about a Hebrew verb...',
      you: 'You',
      bot: 'Bot',
      loading: 'Please wait, the bot is replying...',
      greeting: 'Hi! I can help you explore the Hebrew language ‚Äî especially verbs and how to conjugate them üî§',
      helpHint: 'You can ask, for example: how to conjugate the verb ◊ú◊ú◊õ◊™ or choose a quick question below.',
      saved: '‚úÖ Answer saved!',
      errorSave: '‚ùå Failed to save answer.',
    },
    fran√ßais: {
      ask: 'Demander',
      close: 'Fermer',
      placeholder: 'Demande un verbe h√©breu...',
      you: 'Vous',
      bot: 'Bot',
      loading: 'Veuillez patienter, le bot r√©pond...',
      greeting: 'Bonjour ! Je peux t‚Äôaider √† mieux comprendre l‚Äôh√©breu ‚Äî surtout les verbes et leur conjugaison üî§',
      helpHint: 'Tu peux demander par exemple : comment conjuguer le verbe ◊ú◊ú◊õ◊™ ou choisir une question rapide ci-dessous.',
      saved: '‚úÖ R√©ponse enregistr√©e !',
      errorSave: '‚ùå √âchec de l‚Äôenregistrement.',
    },
    espa√±ol: {
      ask: 'Preguntar',
      close: 'Cerrar',
      placeholder: 'Pregunta sobre un verbo hebreo...',
      you: 'T√∫',
      bot: 'Bot',
      loading: 'Espera un momento, el bot est√° respondiendo...',
      greeting: '¬°Hola! Te ayudar√© a entender el hebreo, en especial los verbos y c√≥mo se conjugan üî§',
      helpHint: 'PPuedes preguntar, por ejemplo: ¬øc√≥mo se conjuga el verbo ◊ú◊ú◊õ◊™? O elige una pregunta r√°pida abajo.',
      saved: '‚úÖ ¬°Respuesta guardada!',
      errorSave: '‚ùå Error al guardar la respuesta.',
    },
    portugu√™s: {
      ask: 'Perguntar',
      close: 'Fechar',
      placeholder: 'Pergunte sobre um verbo hebraico...',
      you: 'Voc√™',
      bot: 'Bot',
      loading: 'Aguarde, o bot est√° respondendo...',
      greeting: 'Ol√°! Estou aqui para te ajudar com o hebraico ‚Äî especialmente com os verbos e suas conjuga√ß√µes üî§',
      helpHint: 'Voc√™ pode perguntar, por exemplo: como conjugar o verbo ◊ú◊ú◊õ◊™ ou escolher uma pergunta r√°pida abaixo.',
      saved: '‚úÖ Resposta salva!',
      errorSave: '‚ùå Falha ao salvar a resposta.',
    },
    ÿßŸÑÿπÿ±ÿ®Ÿäÿ©: {
      ask: 'ÿßÿ≥ÿ£ŸÑ',
      close: 'ÿ•ÿ∫ŸÑÿßŸÇ',
      placeholder: 'ÿßÿ≥ÿ£ŸÑ ÿπŸÜ ŸÅÿπŸÑ ÿπÿ®ÿ±Ÿä...',
      you: 'ÿ£ŸÜÿ™',
      bot: 'ÿ®Ÿàÿ™',
      loading: 'Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±ÿå ÿßŸÑÿ®Ÿàÿ™ Ÿäÿ±ÿØ...',
      greeting: 'ŸÖÿ±ÿ≠ÿ®Ÿãÿß! ÿ≥ÿ£ÿ≥ÿßÿπÿØŸÉ ÿπŸÑŸâ ŸÅŸáŸÖ ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ®ÿ±Ÿäÿ©ÿå ÿÆÿµŸàÿµŸãÿß ÿßŸÑÿ£ŸÅÿπÿßŸÑ Ÿàÿ™ÿµÿ±ŸäŸÅÿßÿ™Ÿáÿß üî§',
      helpHint: 'ŸäŸÖŸÉŸÜŸÉ ÿ£ŸÜ ÿ™ÿ≥ÿ£ŸÑ ŸÖÿ´ŸÑŸãÿß: ŸÉŸäŸÅ ŸäŸèÿµÿ±ŸëŸÅ ÿßŸÑŸÅÿπŸÑ ◊ú◊ú◊õ◊™ÿü ÿ£Ÿà ÿßÿÆÿ™ÿ± ÿ≥ÿ§ÿßŸÑŸãÿß ÿ≥ÿ±ŸäÿπŸãÿß ÿ£ÿØŸÜÿßŸá.',
      saved: '‚úÖ ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ©!',
      errorSave: '‚ùå ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ©.',
    },
    ·ä†·àõ·à≠·äõ: {
      ask: '·å†·ã≠·âÖ',
      close: '·ãù·åã',
      placeholder: '·àµ·àà ·ã®·ãï·â•·à´·ã≠·àµ·å• ·åç·àµ ·å†·ã≠·âÖ...',
      you: '·ä†·äï·â∞',
      bot: '·â¶·âµ',
      loading: '·ä•·â£·ä≠·àÖ ·âÜ·ã≠·ç£ ·â¶·â± ·â†·àò·àµ·å†·âµ ·àã·ã≠ ·äê·ãç...',
      greeting: '·à∞·àã·àù! ·â†·ãï·â•·à´·ã≠·àµ·å• ·âã·äï·âã ·àã·ã≠ ·àç·âµ·à®·ã≥ ·ä•·âΩ·àã·àà·àÅ·ç¢ ·â†·â∞·àà·ã≠·àù ·â†·åç·à∂·âΩ·äì ·â†·àò·àà·ã´·ã®·â≥·â∏·ãç ·àã·ã≠ üî§',
      helpHint: '·àà·àù·à≥·àå·ç£ ·ã®·àö·àâ·âµ·äï ·àò·å†·ã®·âÖ ·âµ·âΩ·àã·àà·àÖ·ç¶ ·ã®◊ú◊ú◊õ◊™ ·åç·àµ ·ä•·äï·ã¥·âµ ·äê·ãç ·ã®·àö·à∞·à´·ãç? ·ãà·ã≠·àù ·ä®·â≥·âΩ ·çà·å£·äï ·å•·ã´·âÑ ·ã≠·àù·à®·å°·ç¢',
      saved: '‚úÖ ·àò·àç·àµ ·â∞·âÄ·àù·åß·àç!',
      errorSave: '‚ùå ·àò·àç·àµ ·àõ·àµ·âÄ·àò·å• ·ä†·àç·â∞·à≥·ä´·àù·ç¢',
    }
  };
  
  const [quickQuestions, setQuickQuestions] = useState([]);

  const fetchQuickQuestions = async (lang) => {
  try {
    const res = await fetch(`https://verbify-api.onrender.com/api/quick-questions?lang=${encodeURIComponent(lang)}`);
    const data = await res.json();
    setQuickQuestions(data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', err);
    setQuickQuestions([]);
  }
};

useEffect(() => {
  if (visible && lang) {
    fetchQuickQuestions(lang);
  }
}, [visible, lang]);


  


  const conjugateButtonLabels = {
    —Ä—É—Å—Å–∫–∏–π: 'üìä –ü—Ä–æ—Å–ø—Ä—è–≥–∞—Ç—å —ç—Ç–æ—Ç –≥–ª–∞–≥–æ–ª',
    english: 'üìä Conjugate this verb',
    fran√ßais: 'üìä Conjugue ce verbe',
    espa√±ol: 'üìä Conjuga este verbo',
    portugu√™s: 'üìä Conjugar este verbo',
    ÿßŸÑÿπÿ±ÿ®Ÿäÿ©: 'üìä ÿµÿ±ŸëŸÅ Ÿáÿ∞ÿß ÿßŸÑŸÅÿπŸÑ',
    ·ä†·àõ·à≠·äõ: 'üìä ·ä•·â£·ä≠·àÖ ·ã≠·àÖ·äï ·åç·àµ ·ä†·âÖ·à≠·â•',
  };

  const conjugateCommand = {
    —Ä—É—Å—Å–∫–∏–π: (verb) => `–ü—Ä–æ—Å–ø—Ä—è–≥–∞—Ç—å –≥–ª–∞–≥–æ–ª ${verb}`,
    english: (verb) => `Conjugate the verb ${verb}`,
    fran√ßais: (verb) => `Conjugue le verbe ${verb}`,
    espa√±ol: (verb) => `Conjuga el verbo ${verb}`,
    portugu√™s: (verb) => `Conjuga o verbo ${verb}`,
    ÿßŸÑÿπÿ±ÿ®Ÿäÿ©: (verb) => `ÿµŸéÿ±ŸëŸêŸÅ ÿßŸÑŸÅÿπŸÑ ${verb}`,
    ·ä†·àõ·à≠·äõ: (verb) => `·ã≠·àÖ·äï ·åç·àµ ${verb} ·ä†·âÖ·à≠·â•`,
  };

  const t = translations[lang] || translations.english;

  const handleClose = async (clearHistory = false) => {
    if (blockModalCloseRef.current) {
      console.log('‚õî handleClose –æ—Ç–º–µ–Ω—ë–Ω: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞');
      return;
    }
    if (clearHistory) {
      await AsyncStorage.removeItem('chatHistory');
      setHistory([]);
    } else {
      try {
        // await AsyncStorage.setItem('chatHistory', JSON.stringify(history));
        const sessionId = await AsyncStorage.getItem('chatSessionId');
await AsyncStorage.setItem('chatHistory', JSON.stringify({
  sessionId,
  messages: history,
}));
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–∫–∏');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', err);
      }
    }
  
    setQuestion('');
    setIsLoading(false);
    setVerbContext(null);
    setShowScrollToBottom(false);
    // scrollViewRef.current = null;
    setScrollKey(prev => prev + 1);
    setModalKey(prev => prev + 1);
    hasLoaded.current = false;
  
    // ‚¨áÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 50));
  
    onClose(); // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
  };
  
  
  const saveChatHistory = async (history) => {
  const sessionId = await AsyncStorage.getItem('chatSessionId');
  await AsyncStorage.setItem('chatHistory', JSON.stringify({
    sessionId,
    messages: history,
  }));
};
  
  
  // useEffect(() => {
  //   if (visible && history.length > 0) {
  //     const nonEmptyHistory = history.filter(item => item.reply !== null);
  //     if (nonEmptyHistory.length > 0) {
  //       console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞:', nonEmptyHistory);
  //       AsyncStorage.setItem('chatHistory', JSON.stringify(nonEmptyHistory))
  //         .then(() => console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ AsyncStorage'))
  //         .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', err));
  //     }
  //   }
  // }, [history, visible]);
  
  
  
  
  const hasLoaded = useRef(false);

useEffect(() => {
  if (visible && !hasLoaded.current) {
    console.log('üöÄ Modal –æ—Ç–∫—Ä—ã–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º loadData()');
    hasLoaded.current = true;
    loadData();
  } else if (!visible) {
    if (!blockModalCloseRef.current) {
      console.log('üîÅ –°–±—Ä–æ—Å hasLoaded –∏ –∏—Å—Ç–æ—Ä–∏–∏');
      hasLoaded.current = false;
      setHistory([]);
    } else {
      console.log('‚ùé –ò—Å—Ç–æ—Ä–∏—è –ù–ï —Å–±—Ä–æ—à–µ–Ω–∞ (blockModalClose –∞–∫—Ç–∏–≤–Ω–æ)');
    }
  }
}, [visible]);

  
  
  
  
  
  
  
  
const loadData = async () => {
  try {
    const sessionId = await AsyncStorage.getItem('chatSessionId');
    if (!sessionId) {
      console.log('üõë –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
      return;
    }

    const name = await AsyncStorage.getItem('name');
    const language = await AsyncStorage.getItem('language');
    if (name) setUsername(name);
    if (language) setLang(language);

    let saved = await AsyncStorage.getItem('chatHistory');
    if (!saved || saved === 'null') {
      await new Promise(resolve => setTimeout(resolve, 300));
      saved = await AsyncStorage.getItem('chatHistory');
    }

    let parsed = null;
    if (saved) {
      try {
        parsed = JSON.parse(saved);
      } catch {}
    }

    if (parsed && parsed.sessionId === sessionId && Array.isArray(parsed.messages)) {
      setHistory(parsed.messages);
    } else {
      const greeting = translations[language]?.greeting || translations.english.greeting;
      const hint = translations[language]?.helpHint || translations.english.helpHint;
      const userName = name || translations[language]?.you || 'You';

      setHistory([
        {
          question: null,
          reply: `**${userName}**\n${greeting}\n${hint}`,
          isWelcome: true,
        },
      ]);
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', err);
  }
};


  
  
  
  
  
  
  

  useEffect(() => {
    const timeout = setTimeout(() => {
      if (scrollViewRef.current) {
        scrollViewRef.current.scrollTo({ y: 0, animated: true });
      }
    }, 100);
    
    return () => clearTimeout(timeout);
  }, [history]);
  

  useEffect(() => {
  const subscription = AppState.addEventListener('change', async (nextAppState) => {
  if (
    appState === 'active' &&
    (nextAppState === 'background' || nextAppState === 'inactive')
  ) {
    if (!isSharingRef.current && !blockModalCloseRef.current && visible) {
      try {
        const sessionId = await AsyncStorage.getItem('chatSessionId');
        await AsyncStorage.setItem('chatHistory', JSON.stringify({
          sessionId,
          messages: history,
        }));
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏');
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏:', e);
      }
    }
  }
  setAppState(nextAppState);
});

  return () => subscription.remove();
}, [appState, visible, history]);

  
  
  
  
  

  const handleAsk = async () => {
    if (!question.trim() || isLoading) return;
  
    Keyboard.dismiss();
    await playSendSound();
    setTimeout(() => setIsLoading(true), 300);
  
    const newQuestion = question.trim();
    const normalized = newQuestion.toLowerCase();
    const isYes = ['–¥–∞', '—Ö–æ—á—É', '–¥–∞, —Ö–æ—á—É', '–¥–∞ —Ö–æ—á—É', '–¥–∞–≤–∞–π', '–ø–æ–∫–∞–∂–∏', '–ø–æ–∫–∞–∂–∏ —Å–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å', '–∫–æ–Ω–µ—á–Ω–æ',

      // üá¨üáß English
      'yes', 'i want', 'yes i want', 'show me', 'show conjugation', 'let me see', 'of course',
    
      // üá´üá∑ Fran√ßais
      'oui', 'je veux', 'oui je veux', 'montre', 'montre-moi', 'bien s√ªr',
    
      // üá™üá∏ Espa√±ol
      's√≠', 'quiero', 's√≠ quiero', 'mu√©strame', 'por supuesto',
    
      // üáµüáπ Portugu√™s
      'sim', 'eu quero', 'sim eu quero', 'me mostra', 'claro',
    
      // üá∏üá¶ Arabic
      'ŸÜÿπŸÖ', 'ÿ£ÿ±ŸäÿØ', 'ŸÜÿπŸÖ ÿ£ÿ±ŸäÿØ', 'ÿ£ÿ±ŸÜŸä', 'ÿ®ÿßŸÑÿ∑ÿ®ÿπ',
    
      // üá™üáπ Amharic
      '·ä†·ãé', '·ä•·çà·àç·åã·àà·àÅ', '·ä†·ãé ·ä•·çà·àç·åã·àà·àÅ', '·ä†·à≥·ã®·äù', '·ä•·à∫'].includes(normalized);

    if (isYes && lastVerbContextRef.current) {
      const conjugateText = conjugateCommand[lang]?.(lastVerbContextRef.current) || conjugateCommand.english(lastVerbContextRef.current);
      await handleAskAuto(conjugateText);
      setQuestion('');
      setIsLoading(false);
      return;
    }
  
    const verbToUse = isYes ? lastVerbContextRef.current : '';
  
    const tempMessage = {
      question: newQuestion,
      reply: null,
      verbContext: null,
      isVerbSuggestion: false,
    };
    setHistory(prev => [tempMessage, ...prev]);
  
    const formattedHistory = history
      .slice(0, 5)
      .reverse()
      .flatMap(item => [
        { role: 'user', content: item.question },
        { role: 'assistant', content: item.reply },
      ]);
  
    let reply;
    try {
      reply = await askChatGPT(newQuestion, formattedHistory, verbToUse);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–æ—Ç—É:', error);
      await playReplySound();
      setIsLoading(false);
      return;
    }
  
    const extractedVerb = extractVerbFromReply(reply);
    const isVerbSuggestion = extractedVerb && !isConjugationReply(reply);
  
    // üõ† –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º lastVerbContextRef –î–û –≤—ã–∑–æ–≤–∞ handleAskAuto
    const actualVerb = extractedVerb || verbToUse;
    setVerbContext(actualVerb);
    lastVerbContextRef.current = actualVerb;
  
    // ‚¨áÔ∏è –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–∞), —Å—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—Ä–æ—Å
    if (isYes && verbToUse) {
      const conjugateText = conjugateCommand[lang]?.(verbToUse) || conjugateCommand.english(verbToUse);
      setQuestion('');
      setIsLoading(false);
      await handleAskAuto(conjugateText);
      return;
    }
  
    // ‚¨áÔ∏è –í –æ–±—ã—á–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    setHistory(prev =>
      prev.map((item, index) =>
        index === 0
          ? {
              ...item,
              reply,
              verbContext: actualVerb,
              isVerbSuggestion,
            }
          : item
      )
    );
  
    setQuestion('');
    await playReplySound();
    setIsLoading(false);
  };
  
  
  
  
  
  
  const playSendSound = async () => {
    try {
      const { sound } = await Audio.Sound.createAsync(
        require('./click.mp3')

      );
      await sound.playAsync();
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏:', e);
    }
  };
  
  const playReplySound = async () => {
    try {
      const { sound } = await Audio.Sound.createAsync(
        require('./click.mp3')

      );
      await sound.playAsync();
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –æ—Ç–≤–µ—Ç–∞:', e);
    }
  };
  
  
  const playReceiveSound = async () => {
    const { sound } = await Audio.Sound.createAsync(require('./click.mp3'));
    await sound.playAsync();
  };
  
  
  


  const handleAskAuto = async (customQuestion) => {
    if (!customQuestion.trim()) return;
  
    Keyboard.dismiss();
    await playSendSound();
    setIsLoading(true);
  
    const normalized = customQuestion.toLowerCase();
    const isYes = ['–¥–∞', 'yes', 'oui', 's√≠', 'sim', 'ŸÜÿπŸÖ', '·ä†·ãé'].includes(normalized);
    const previousVerb = lastVerbContextRef.current || '';
  
    const verbToUse = isYes ? previousVerb : '';
  
    setHistory(prev => [
      { question: customQuestion, reply: null, verbContext: null },
      ...prev
    ]);
  
    const formattedHistory = history
      .slice(0, 5)
      .reverse()
      .flatMap(item => [
        { role: 'user', content: item.question },
        { role: 'assistant', content: item.reply }
      ]);
  
    let replyAuto;
    try {
      replyAuto = await askChatGPT(customQuestion, formattedHistory, verbToUse);
      await playReceiveSound();
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleAskAuto:', err);
      setIsLoading(false);
      return;
    }
  
    const extractedVerbAuto = extractVerbFromReply(replyAuto);
    const isVerbSuggestionAuto = extractedVerbAuto && !isConjugationReply(replyAuto);
  
    const actualVerb = extractedVerbAuto || previousVerb;
    setVerbContext(actualVerb);
    lastVerbContextRef.current = actualVerb;
  
    setHistory(prev =>
      prev.map((item, index) =>
        index === 0
          ? {
              ...item,
              reply: replyAuto,
              verbContext: actualVerb,
              isVerbSuggestion: isVerbSuggestionAuto,
            }
          : item
      )
    );
  
    setIsLoading(false);
  };
  
  
  
  
  



  

  const handleShare = (text) => {
    const cleanedText = stripMarkdown(text);
  
    InteractionManager.runAfterInteractions(() => {
      RNShare.share({ message: cleanedText }).catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ:', err);
      });
    });
  };
  
  
  
  
  

  const extractVerbFromReply = (reply) => {
    const match = reply.match(/–≥–ª–∞–≥–æ–ª\s+"([^"]+)"/i) ||
                  reply.match(/verb\s+"([^"]+)"/i) ||
                  reply.match(/verbe\s+"([^"]+)"/i) ||
                  reply.match(/verbo\s+"([^"]+)"/i) ||
                  reply.match(/ŸÅÿπŸÑ\s+"([^"]+)"/i) ||
                  reply.match(/·åç·àµ\s+"([^"]+)"/i);
    return match ? match[1] : null;
  };

  const isConjugationReply = (text) => {
    const lowered = text?.toLowerCase() || '';
  
    return (
      // –†—É—Å—Å–∫–∏–π
      lowered.includes('–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤:') ||
      lowered.includes('–±–∏–Ω—å—è–Ω:') ||
      lowered.includes('–∫–æ—Ä–µ–Ω—å:') ||
  
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
      lowered.includes('infinitive:') ||
      lowered.includes('binyan:') ||
      lowered.includes('root:') ||
  
      // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
      lowered.includes('infinitif:') ||
      lowered.includes('verbe:') ||
      lowered.includes('racine:') ||
  
      // –ò—Å–ø–∞–Ω—Å–∫–∏–π
      lowered.includes('infinitivo:') ||
      lowered.includes('verbo:') ||
      lowered.includes('ra√≠z:') ||
  
      // –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π
      lowered.includes('infinitivo:') ||
      lowered.includes('verbo:') ||
      lowered.includes('raiz:') ||
  
      // –ê—Ä–∞–±—Å–∫–∏–π (–≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      lowered.includes('ÿµŸäÿ∫ÿ© ÿßŸÑŸÖÿµÿØÿ±') || // infinitive
      lowered.includes('ÿßŸÑŸÅÿπŸÑ') ||       // verb
      lowered.includes('ÿßŸÑÿ¨ÿ∞ÿ±') ||       // root
  
      // –ê–º—Ö–∞—Ä—Å–∫–∏–π (–≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      lowered.includes('·àò·àà·ä™·ã´') ||     // –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤
      lowered.includes('·åç·àµ') ||       // –≥–ª–∞–≥–æ–ª
      lowered.includes('·àù·äï·å≠')         // –∫–æ—Ä–µ–Ω—å
    );

    };

    const handleSave = async (text) => {
      try {
        const existing = await AsyncStorage.getItem('savedAnswers');
        const saved = existing ? JSON.parse(existing) : [];
    
        const newEntry = {
          id: Date.now(),
          text,
          timestamp: new Date().toISOString(),
        };
    
        await AsyncStorage.setItem('savedAnswers', JSON.stringify([newEntry, ...saved]));
    
        // –í–º–µ—Å—Ç–æ alert
        showToast(translations[lang]?.saved || translations.english.saved);
    
        // –í–∏–±—Ä–æ—ç—Ñ—Ñ–µ–∫—Ç
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        showToast(translations[lang]?.errorSave || translations.english.errorSave);
      }
    };
    
    
    const showToast = (message) => {
      if (Platform.OS === 'android') {
        ToastAndroid.show(message, ToastAndroid.SHORT);
      } else {
        alert(message); // –¥–ª—è iOS –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      }
    };

  return (
    <>
      {visible && (
        <Modal
        visible={visible}
        animationType="slide"
        transparent={true}
        onRequestClose={async () => {
          console.log('üì¶ onRequestClose –≤—ã–∑–≤–∞–Ω');
          if (blockModalCloseRef.current) {
            console.log('üö´ –ó–∞–∫—Ä—ã—Ç–∏–µ ChatBotModal –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (share in progress)');
            return;
          }
        
          console.log('‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º handleClose');
          await handleClose(false); // —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é!
        }}
        
        
      >
  
          <KeyboardAvoidingView
            behavior={Platform.OS === 'ios' ? 'padding' : undefined}
            style={{ flex: 1 }}
            keyboardVerticalOffset={Platform.OS === 'ios' ? 80 : 0}
          >
            <View style={styles.container}>

              {/* Header */}
              <View style={styles.header}>
  {/* –õ–æ–≥–æ —Å–ª–µ–≤–∞ */}
  <Image source={require('../VERBIFY.png')} style={styles.logo} />

  {/* –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ, —á—Ç–æ–±—ã –ø—Ä–∏–∂–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –≤–ø—Ä–∞–≤–æ */}
  <View style={{ flexDirection: 'row', alignItems: 'center' }}>
    <TouchableOpacity onPress={() => setSavedModalVisible(true)} style={styles.iconButton}>
      <Image source={require('../save2.png')} style={styles.iconImage} />
    </TouchableOpacity>
    <TouchableOpacity onPress={() => handleClose()}>
      <Ionicons name="close" size={36} color="#003366" />
    </TouchableOpacity>
  </View>
</View>


              {/* Scrollable chat */}
              <ScrollView
  key={scrollKey}
  ref={scrollViewRef}
  style={styles.chat}
  contentContainerStyle={{ paddingBottom: 80 }}
  keyboardShouldPersistTaps="handled"
  keyboardDismissMode="interactive"
  onScroll={event => {
    const { contentOffset, contentSize, layoutMeasurement } = event.nativeEvent;
    const isNearBottom = contentOffset.y + layoutMeasurement.height >= contentSize.height - 50;
    setShowScrollToBottom(!isNearBottom && contentOffset.y > 200);
  }}
  scrollEventThrottle={16}
>
                {history.map((item, index) => {
  const isLast = index === 0;
  return (
    <View key={index} style={[styles.messageBlock, isLast && styles.highlightMessage]}>
      {/* –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {item.question ? (
  <View style={styles.questionBubble}>
    <View style={styles.labelTag}>
  <Text style={styles.labelText} maxFontSizeMultiplier={1.2}>
    {username || t.you}
  </Text>
</View>
    <Text style={styles.userQuestion} maxFontSizeMultiplier={1.2}>
      {item.question}
    </Text>
  </View>
) : null}

      {/* –û—Ç–≤–µ—Ç –±–æ—Ç–∞ */}
      <View style={styles.answerBubble}>
        {item.reply ? (
          <FadeInView>
            <>
              {/* –õ–æ–≥–æ –±–æ—Ç–∞ */}
              <View style={styles.botHeader}>
                <View style={styles.botIconWrapper}>
                  <Image source={require('../AI2.png')} style={styles.botIcon} />
                </View>
              </View>

              {/* –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ */}
              {typeof item.reply === 'string' ? (
  <StyledMarkdown>{item.reply}</StyledMarkdown>
) : (
  <Text style={styles.emptyText}maxFontSizeMultiplier={1.2}>
    üö´ Error loading text
  </Text>
)}


              {/* –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–ø—Ä—è–≥–∞—Ç—å —ç—Ç–æ—Ç –≥–ª–∞–≥–æ–ª" */}
              {index === 0 && item.isVerbSuggestion && (
  <TouchableOpacity
    style={styles.extraButton}
    onPress={async () => {
      const conjugateText = conjugateCommand[lang] ? conjugateCommand[lang](verbContext) : conjugateCommand.english(verbContext);
      await handleAskAuto(conjugateText);
    }}
  >

    <Text style={styles.extraButtonText}maxFontSizeMultiplier={1.2}>
      {conjugateButtonLabels[lang] || conjugateButtonLabels.english}
    </Text>
  </TouchableOpacity>
)}

{/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä—è–∂–µ–Ω–∏—è */}
{item.reply && !item.isWelcome && (
 <View style={styles.shareWrapper}>
 {/* –ö–Ω–æ–ø–∫–∞ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å */}
 <TouchableOpacity
   onPress={() => handleSave(item.reply)}
   style={[styles.saveButton, { marginRight: 12 }]}
   activeOpacity={0.8}
 >
   <Image source={require('../save1.png')} style={styles.saveIcon} />
 </TouchableOpacity>

 {/* –ö–Ω–æ–ø–∫–∞ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å */}
 <TouchableOpacity
   onPress={() => copyAnswer(item.reply)}
   style={[styles.copyButton, { marginRight: 12 }]}
   activeOpacity={0.8}
 >
   <Ionicons name="copy" size={22} color="#003366" />
 </TouchableOpacity>

 {/* –ö–Ω–æ–ø–∫–∞ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è */}
 <TouchableOpacity
   onPress={() => shareAnswerOutsideModal(item.reply, null, blockModalCloseRef)}
   style={styles.shareButton}
   activeOpacity={0.8}
 >
   <Image source={require('../share.png')} style={styles.shareIcon} />
 </TouchableOpacity>
</View>

)}



              {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å */}
{item.isWelcome && quickQuestions && quickQuestions.length > 0 && (
  <View style={styles.quickQuestionsWrapper}>
    {quickQuestions.map((q, idx) => (
      <TouchableOpacity
        key={idx}
        activeOpacity={0.7}
        style={[styles.quickButton, isLoading && { opacity: 0.4 }]}
        onPress={() => !isLoading && handleAskAuto(q.question)}
        disabled={isLoading}
      >
        <Text style={styles.quickButtonText} maxFontSizeMultiplier={1.2}>
          {q.label}
        </Text>
      </TouchableOpacity>
    ))}
  </View>
)}

            </>
          </FadeInView>
        ) : (
          <View style={styles.loadingWrapper}>
  <Image source={require('../AI2.png')} style={styles.botIconSmall} />
  <ActivityIndicator size="small" color="#4A6491" style={{ marginLeft: 2, marginRight: 5 }} />
  <Text style={styles.loadingText} maxFontSizeMultiplier={1.2}>
    {t.loading}
  </Text>
</View>

        )}
      </View>
    </View>
  );
})}

              </ScrollView>

              {/* Scroll to bottom button */}
           {showScrollToBottom && (
  <TouchableOpacity
    onPress={() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
      setShowScrollToBottom(false); // <-- –≤–æ—Ç —Ç–∞–∫!
    }}
    style={styles.scrollToBottomButton}
  >
    <Ionicons name="arrow-down" size={28} color="#4A6491" />
  </TouchableOpacity>
)}

              {/* Input */}
              <View style={styles.inputWrapper}>
              <TextInput
  value={question}
  onChangeText={setQuestion}
  placeholder={t.placeholder}
  style={[
    styles.inputWithButton,
    isLoading && styles.inputDisabled,
    lang === 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©' && { paddingRight: 60, textAlign: 'right' }, // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
  ]}
  multiline
  editable={!isLoading}
  textAlignVertical="top"
  maxFontSizeMultiplier={1.2}
/>

                <TouchableOpacity
                  onPress={handleAsk}
                  style={[styles.sendButton, isLoading && { opacity: 0.5 }]}
                  disabled={isLoading}
                >
                  <Ionicons name="arrow-up-circle" size={36} color="#4A6491" />
                </TouchableOpacity>
              </View>

            </View>
          </KeyboardAvoidingView>
        </Modal>
      )}

{savedModalVisible && (
  <SavedAnswersModal
    visible={savedModalVisible}
    onClose={() => setSavedModalVisible(false)}
    blockModalCloseRef={blockModalCloseRef}
  />
)}



    </>
  );
};

  
  



const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F6F8FB', // –º–æ–∂–Ω–æ 'white', –Ω–æ —ç—Ç–æ –º—è–≥–∫–∏–π —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
  },
  closeIcon: {
    padding: 5,
    marginTop: Platform.OS === 'ios' ? 0 : -4, // —á—É—Ç—å –≤—ã—à–µ
  },
  chat: { flex: 1, marginTop: 10, marginLeft:10, marginRight:10, },
  messageBlock: {
    marginBottom: 20,
    marginLeft: 10,
    marginRight: 10, // ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  },
  
  highlightMessage: {
    backgroundColor: '#EEF3FB',
    borderColor: '#4A6491',
    borderWidth: 1,
    borderRadius: 8,
    padding: 5,
  },
  
  questionBubble: {
    backgroundColor: '#D1E3F1',
    borderRadius: 10,
    padding: 8,
    marginBottom: 6,
    alignSelf: 'flex-start',
    maxWidth: '85%',
    // width: '100%',
  },
  answerBubble: {
    backgroundColor: '#FFFDEF',
    borderRadius: 10,
    padding: 5,
    // alignSelf: 'flex-start',
    // maxWidth: '100%',
    width: '100%',
    position: 'relative', 
  },

  labelTag: {
    alignSelf: 'flex-start',
    marginBottom: 4,
  },
  
  labelText: {
    fontWeight: 'bold',
    color: 'white',
    fontSize: 16,
    paddingVertical: 3,
    paddingHorizontal: 8,
    backgroundColor: '#003366',
    borderRadius: 6,
    overflow: 'hidden', // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
  },
  
  userQuestion: {
    color: '#003366',
    fontWeight: 'bold',
    fontSize: 15,
    marginTop: 8, // –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
    marginBottom: 5,
    // marginleft: 20
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 10,
    gap: 8,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#999',
    padding: 10,
    borderRadius: 5,
    minHeight: 40,
    maxHeight: 100,
    
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 12, // –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º
    height: 60,             // —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    backgroundColor: '#D1E3F1',
    borderBottomWidth: 1,
    borderColor: '#ccc',
  },
  
  
  logo: {
    width: 90,
    height: 90,
    resizeMode: 'contain',
  },
  closeIcon: {
    // padding: 5,
  },
  // chat: {
  //   flex: 1,
  //   marginTop: 10,
  // },
  botHeader: {
    width: '100%',
    // alignItems: 'flex-start',
    justifyContent: 'center',
  // alignItems: 'center',
    height: 30,
    marginBottom: 1,
    // margintop: 15,
  },

  botIconWrapper: {
    backgroundColor: '#D1E3F1',
    borderRadius: 8,
    width: 65,
    height: 30,
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'hidden', // –æ–±—Ä–µ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—é—â–∏–µ —É–≥–ª—ã
  },
  
  botIcon: {
    
    width: 70,
    height: 70,
    resizeMode: 'contain',
  },
  // sendButton: {
  //   marginLeft: 8,
  // },
  inputWrapper: {
    position: 'relative',
    marginTop: 10,
    marginBottom: 10,
    marginLeft:10,
    marginRight:10,
  },
  
  inputWithButton: {
    borderWidth: 1,
    borderColor: '#999',
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 16,
    paddingRight: 44, // –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
    minHeight: 44,
    maxHeight: 100,
    fontSize: 16,
    backgroundColor: '#f5f5f5',
  },
  
  sendButton: {
    position: 'absolute',
    right: 10,
    top: '40%',
    transform: [{ translateY: -14 }],
  },
  loadingWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 8,
    flexWrap: 'wrap', // üí• –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫
    maxWidth: '85%', // üí• –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —à–∏—Ä–∏–Ω—É –ø—É–∑—ã—Ä—è
    backgroundColor: '#FFFDEF', // (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ñ–æ–Ω –∫–∞–∫ —É –æ—Ç–≤–µ—Ç–æ–≤)
    borderRadius: 10, // (–¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
  },
  
  loadingText: {
    fontStyle: 'italic',
    color: '#888',
    fontSize: 12,
    marginleft: 10,
  },
  inputDisabled: {
    backgroundColor: '#e4e4e4',
    color: '#999',
  },
  extraButton: {
    marginTop: 8,
    backgroundColor: '#dce7f5',
    paddingVertical: 6,
    paddingHorizontal: 14,
    borderRadius: 8,
    alignSelf: 'flex-start',
  },
  
  extraButtonText: {
    fontSize: 15,
    color: '#003366',
    fontWeight: '600',
  },

  shareWrapper: {
    marginTop: 6,
    flexDirection: 'row', // <-- —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ
    justifyContent: 'flex-end',
    alignItems: 'center', // <-- —á—Ç–æ–±—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –≤—ã—Ä–æ–≤–Ω—è—Ç—å
    gap: 10, // –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
  },
  
  shareButton: {
    backgroundColor: '#f0f0f0',
    borderRadius: 20,
    padding: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 3,
  },
  
  shareIcon: {
    width: 22,
    height: 22,
    resizeMode: 'contain',
  },
  

  shareAbsolute: {
    position: 'absolute',
    bottom: 6,
    right: 10,
    padding: 3,
  },
  
  shareIcon: {
    width: 20,
    height: 20,
    resizeMode: 'contain',
  },

  quickQuestionsWrapper: {
    marginTop: 10,
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    gap: 6, // –¥–ª—è React Native Web –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ margin
  },
  quickButton: {
    backgroundColor: '#dce7f5',
    marginHorizontal: 2,
    marginVertical: 2,
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 8,
    minWidth: '42%',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.15,
    shadowRadius: 2,
  },
  quickButtonText: {
    fontSize: 14,
    fontWeight: '700',
    color: '#003366',
    textAlign: 'center',
    letterSpacing: 0.5,
  },
  
  scrollToBottomButton: {
    position: 'absolute',
    bottom: 100, // –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    right: 20,
    backgroundColor: '#dce7f5',
    borderRadius: 25,
    padding: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  botIconSmall: {
    width: 64,
    height: 64,
    resizeMode: 'contain',
    // backgroundColor: '#D1E3F1',
    // borderRadius: 8,
    
  },

  saveButton: {
    padding: 6,
    backgroundColor: '#f0f0f0',
    borderRadius: 20,
    elevation: 2,
  },
  
  saveIcon: {
    width: 24,
    height: 24,
    resizeMode: 'contain',
  },
  iconButton: {
    padding: 4,
    marginHorizontal: 4,
  },
  iconImage: {
    width: 36,
    height: 36,
    resizeMode: 'contain',
  },
  copyButton: {
    padding: 8,
    backgroundColor: '#f0f0f0',
    borderRadius: 20,
    elevation: 2,
  },
  
});

export default ChatBotModal;
