// notifications.js
import { Platform, PermissionsAndroid, NativeModules } from 'react-native';
import PushNotification from 'react-native-push-notification';
import AsyncStorage from '@react-native-async-storage/async-storage';

// ===== –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è =====
const normalizeLanguageCode = (lang) => {
  switch (lang) {
    case '—Ä—É—Å—Å–∫–∏–π': return 'ru';
    case 'english': return 'en';
    case 'fran√ßais': return 'fr';
    case 'espa√±ol': return 'es';
    case 'portugu√™s': return 'pt';
    case 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©': return 'ar';
    case '·ä†·àõ·à≠·äõ': return 'am';
    default: return 'en';
  }
};

const notificationMessages = {
  ru: { title: '–≠—Ç–æ Verbify!', body: '–ù–µ –∑–∞–±—É–¥—å –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –∑–∞–≤—Ç—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏! üí™' },
  en: { title: 'This is Verbify!', body: 'Don‚Äôt forget to practice!\nPractice today ‚Äî confidence in conversation tomorrow! üí™' },
  fr: { title: 'C‚Äôest Verbify !', body: 'N‚Äôoublie pas de t‚Äôentra√Æner !\nAujourd‚Äôhui l‚Äôentra√Ænement ‚Äî demain confiance dans la conversation ! üí™' },
  es: { title: '¬°Esto es Verbify!', body: '¬°No olvides practicar!\nPractica hoy ‚Äî confianza en la conversaci√≥n ma√±ana üí™' },
  pt: { title: 'Este √© o Verbify!', body: 'N√£o se esque√ßa de praticar!\nPratique hoje ‚Äî confian√ßa na conversa amanh√£! üí™' },
  ar: { title: 'Ÿáÿ∞ÿß ŸáŸà Verbify!', body: 'ŸÑÿß ÿ™ŸÜÿ≥Ÿé ÿßŸÑÿ™ÿØÿ±ÿ®!\nÿ™ŸÖÿ±ŸëŸÜ ÿßŸÑŸäŸàŸÖ ‚Äî Ÿàÿ´ŸÇÿ© ŸÅŸä ÿßŸÑÿ≠ÿØŸäÿ´ ÿ∫ÿØŸãÿß! üí™' },
  am: { title: '·ã≠·àÖ Verbify ·äê·ãç!', body: '·àõ·àµ·â∞·àõ·à≠·äï ·ä†·âµ·à≠·à≥!\n·ãõ·à¨ ·àõ·àµ·â∞·àõ·à≠ ‚Äî ·äê·åà ·â†·äï·åç·åç·à≠ ·ä•·àù·äê·âµ! üí™' },
};

// ===== –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–≤ Expo Go –µ–≥–æ –Ω–µ—Ç) =====
export const isPushModuleAvailable = !!NativeModules.RNPushNotification;

const CHANNEL_ID = 'verbify_reminders';

// Android 13+ runtime permission
export async function unifiedRequestNotificationPermission() {
  if (Platform.OS !== 'android') return true;
  try {
    const already = await PermissionsAndroid.check(
      PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS
    );
    if (already) return true;

    const res = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS
    );
    return res === PermissionsAndroid.RESULTS.GRANTED;
  } catch {
    return false;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞)
export function initNotifications() {
  if (!isPushModuleAvailable) {
    console.log('üîï RNPN native module NOT available (Expo Go / Bridgeless). No-op.');
    return false;
  }

  PushNotification.createChannel(
    {
      channelId: CHANNEL_ID,
      channelName: 'Verbify Reminders',
      channelDescription: 'Daily practice notifications',
      soundName: 'default',
      importance: 4, // HIGH
      vibrate: true,
    },
    (created) => console.log('üì° Channel created:', created)
  );

  PushNotification.configure({
    onNotification(notification) {
      console.log('üì© Notification tapped:', notification);
    },
    requestPermissions: Platform.OS === 'ios',
  });

  return true;
}

async function getLocalizedPayload() {
  const raw = (await AsyncStorage.getItem('language')) || 'english';
  const lang = normalizeLanguageCode(raw);
  const msg = notificationMessages[lang] || notificationMessages.en;
  return { title: msg.title, message: msg.body };
}

// –†–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ N —Å–µ–∫—É–Ω–¥
export async function scheduleInSeconds(seconds = 10) {
  if (!isPushModuleAvailable) {
    console.log('üîï scheduleInSeconds skipped: no native module (Expo Go).');
    return;
  }
  const { title, message } = await getLocalizedPayload();
  PushNotification.localNotificationSchedule({
    channelId: CHANNEL_ID,
    title,
    message: `${message}\n\n(~${seconds} sec)`,
    date: new Date(Date.now() + seconds * 1000),
    allowWhileIdle: true,
  });
  console.log(`‚úÖ Scheduled single notification in ${seconds} sec`);
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
export async function scheduleDailyNotification(hour = 9, minute = 0) {
  if (!isPushModuleAvailable) {
    console.log('üîï scheduleDailyNotification skipped: no native module (Expo Go).');
    return;
  }
  const { title, message } = await getLocalizedPayload();

  const now = new Date();
  const first = new Date(now);
  first.setHours(hour, minute, 0, 0);
  if (first <= now) first.setDate(first.getDate() + 1);

  PushNotification.localNotificationSchedule({
  channelId: CHANNEL_ID,
  // smallIcon: 'ic_notification', // üëà –≤–æ—Ç —ç—Ç–æ
  // largeIcon: 'ic_launcher',
  title,
  message,
  date: first,
  allowWhileIdle: true,
  repeatType: 'day',
});
  console.log(`‚úÖ Scheduled daily notification at ${hour}:${String(minute).padStart(2, '0')}`);
}

// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö
export function cancelNotifications() {
  if (!isPushModuleAvailable) {
    console.log('üîï cancelNotifications skipped: no native module (Expo Go).');
    return;
  }
  PushNotification.cancelAllLocalNotifications();
  console.log('üóë All notifications cancelled');
}

// –£–¥–æ–±–Ω—ã–π –±—É—Ç—Å—Ç—Ä–∞–ø (–µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º)
export async function bootstrapNotifications(hour = 9, minute = 0) {
  const ok = initNotifications(); // –≤–µ—Ä–Ω—ë—Ç false –≤ Expo Go
  if (!ok) return false;
  const granted = await unifiedRequestNotificationPermission();
  if (!granted) return false;
  await scheduleDailyNotification(hour, minute);
  return true;
}
